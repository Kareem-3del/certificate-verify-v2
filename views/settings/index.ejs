<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">

<div class="min-h-screen flex flex-col">
    <!-- Navigation -->
    <nav class="bg-white shadow-md py-4">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="#" class="text-xl font-semibold text-gray-700">Dashboard</a>
            <div>
                <a href="#" class="px-4 py-2 text-gray-600 hover:text-gray-800">Settings</a>
                <a href="#" class="px-4 py-2 text-gray-600 hover:text-gray-800">Certificates</a>
                <a href="#" class="px-4 py-2 text-gray-600 hover:text-gray-800">Users</a>
            </div>
        </div>
    </nav>


    <div class="flex flex-1">
        <!-- Sidebar -->
        <aside class="bg-white shadow-md w-64 py-6">
            <nav class="px-4">
                <a href="#" class="block px-4 py-2 text-gray-600 hover:bg-gray-200">Settings</a>
                <a href="#" class="block px-4 py-2 text-gray-600 hover:bg-gray-200">Certificates</a>
                <a href="#" class="block px-4 py-2 text-gray-600 hover:bg-gray-200">Users</a>
            </nav>
            <a href="/auth/logout/" id="logoutBtn" class="px-8 py-2 text-gray-600 hover:text-gray-800 w-full">Logout</a>

        </aside>

        <!-- Main Content -->
        <main class="flex-1 bg-gray-100 p-8">
            <section id="settings" class="hidden">
                <h1 class="text-2xl font-semibold mb-6">Update Settings</h1>
                <form action="/settings" method="POST" class="space-y-4">
                    <div>
                        <label for="instructorName" class="block text-gray-700">Instructor Name:</label>
                        <input type="text" id="instructorName" name="instructorName" value="<%= settings.instructorName %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <div>
                        <label for="instructorId" class="block text-gray-700">Instructor ID:</label>
                        <input type="text" id="instructorId" name="instructorId" value="<%= settings.instructorId %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <div>
                        <label for="trainingCenterName" class="block text-gray-700">Training Center Name:</label>
                        <input type="text" id="trainingCenterName" name="trainingCenterName" value="<%= settings.trainingCenterName %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <div>
                        <label for="trainingCenterId" class="block text-gray-700">Training Center ID:</label>
                        <input type="text" id="trainingCenterId" name="trainingCenterId" value="<%= settings.trainingCenterId %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <div>
                        <label for="tcCity" class="block text-gray-700">TC City:</label>
                        <input type="text" id="tcCity" name="tcCity" value="<%= settings.tcCity %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <div>
                        <label for="trainingSiteName" class="block text-gray-700">Training Site Name:</label>
                        <input type="text" id="trainingSiteName" name="trainingSiteName" value="<%= settings.trainingSiteName %>" class="w-full p-2 border rounded-lg">
                    </div>
                    <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg">Update</button>
                </form>
            </section>


            <section id="users" class="hidden">
                <h1 class="text-2xl font-semibold mb-6">Users Section</h1>

                <!-- Create User Form -->
                <div class="mb-8">
                    <h2 class="text-xl font-semibold mb-4">Create New User</h2>
                    <form id="createUserForm" class="space-y-4">
                        <div>
                            <label for="username" class="block text-gray-700">Username:</label>
                            <input type="text" id="username" name="username" class="w-full p-2 border rounded-lg" required>
                        </div>
                        <div>
                            <label for="password" class="block text-gray-700">Password:</label>
                            <input type="password" id="password" name="password" class="w-full p-2 border rounded-lg" required>
                        </div>
                        <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg">Create User</button>
                    </form>
                </div>

                <!-- Users List -->
                <div>
                    <h2 class="text-xl font-semibold mb-4">Users List</h2>
                    <table id="usersList" class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b">ID</th>
                            <th class="py-2 px-4 border-b">Username</th>
                            <th class="py-2 px-4 border-b">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        <!-- Users will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </section>
            <section id="certificates" class="hidden">
                <h1 class="text-2xl font-semibold mb-6">Certificates</h1>
                <input type="text" id="searchInput" placeholder="Search certificates..." class="w-full p-2 border rounded-lg mb-4">
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b">ID</th>
                            <th class="py-2 px-4 border-b">Name</th>
                            <th class="py-2 px-4 border-b">City</th>
                            <th class="py-2 px-4 border-b">Training Site Name</th>
                            <th class="py-2 px-4 border-b">Issued</th>
                            <th class="py-2 px-4 border-b">Express</th>
                            <th class="py-2 px-4 border-b">Instructor ID</th>
                            <th class="py-2 px-4 border-b">Instructor Name</th>
                            <th class="py-2 px-4 border-b">Renew By</th>
                            <th class="py-2 px-4 border-b">Training Center Name</th>
                            <th class="py-2 px-4 border-b">Training Center ID</th>
                            <th class="py-2 px-4 border-b">Created At</th>
                            <th class="py-2 px-4 border-b">Actions</th>
                        </tr>
                        </thead>
                        <tbody id="certificatesList">
                        <!-- Certificates will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <button id="loadMoreBtn" class="hidden px-4 py-2 bg-blue-500 text-white rounded-lg mt-4">Load More</button>
            </section>


        </main>
    </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    async function loadUsers() {
      try {
        const response = await fetch('/users');
        const users = await response.json();
        const usersList = document.getElementById('usersList');
        usersList.innerHTML = '';
        users.forEach(user => {
          const row = document.createElement('tr');
          row.innerHTML = `
                    <td class="py-2 px-4">${user.id}</td>
                    <td class="py-2 px-4">${user.username}</td>
                    <td class="py-2 px-4">
                        <button class="text-red-500 hover:underline delete-btn" data-id="${user.id}">Delete</button>
                    </td>
                `;
          usersList.appendChild(row);
        });
      } catch (error) {
        console.error('Error loading users:', error);
        alert('An error occurred while loading users.');
      }
    }
    loadUsers()
    // Create User Form Submission
    const createUserForm = document.getElementById('createUserForm');
    createUserForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      try {
        const response = await fetch('/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ username, password })
        });
        if (response.ok) {
          document.getElementById('username').value = '';
          document.getElementById('password').value = '';
          alert('User created successfully.');
          loadUsers(); // Reload users list after creation
        } else {
          throw new Error('Failed to create user.');
        }
      } catch (error) {
        console.error('Error creating user:', error);
        alert('An error occurred while creating the user.');
      }
    });

    // Delete User Event Listener
    document.getElementById('usersList').addEventListener('click', async (event) => {
      if (event.target.classList.contains('delete-btn')) {
        const userId = event.target.getAttribute('data-id');
        if (confirm(`Are you sure you want to delete user ${userId}?`)) {
          try {
            const response = await fetch(`/users/${userId}`, {
              method: 'DELETE',
            });
            if (response.ok) {
              // Remove the deleted user from the UI
              event.target.closest('tr').remove();
              alert(`User ${userId} deleted successfully.`);
            } else {
              throw new Error('Failed to delete user.');
            }
          } catch (error) {
            console.error('Error deleting user:', error);
            alert('An error occurred while deleting the user.');
          }
        }
      }
    });

    const sections = {
      "Settings": document.getElementById("settings"),
      "Certificates": document.getElementById("certificates"),
      "Users": document.getElementById("users"),
    };

    const navLinks = document.querySelectorAll("nav a");

    navLinks.forEach(link => {
      link.addEventListener("click", (event) => {
        event.preventDefault();
        const sectionName = event.target.textContent;
        Object.values(sections).forEach(section => section.classList.add("hidden"));
        sections[sectionName].classList.remove("hidden");
        if (sectionName === "Certificates") {
          loadCertificates();
        }
      });
    });


    let offset = 0;
    const limit = 10;
    let loading = false;

    async function loadCertificates(searchQuery = '') {
      if (loading) return;
      loading = true;
      const response = await fetch(`/certificates?limit=${limit}&offset=${offset}&search=${searchQuery}`);
      const data = await response.json();
      const certificatesList = document.getElementById('certificatesList');
      data.certificates.forEach(cert => {
        const row = document.createElement('tr');
        row.classList.add('bg-white', 'border-b');
        row.innerHTML = `
                    <td class="py-2 px-4">${cert.id}</td>
                    <td class="py-2 px-4">${cert.name}</td>
                    <td class="py-2 px-4">${cert.city}</td>
                    <td class="py-2 px-4">${cert.training_site_name}</td>
                    <td class="py-2 px-4">${new Date(cert.issued).toLocaleDateString('en-US')}</td>
                    <td class="py-2 px-4">${new Date(cert.express).toLocaleDateString('en-US')}</td>
                    <td class="py-2 px-4">${cert.instructor_id || ''}</td>
                    <td class="py-2 px-4">${cert.instructor_name || ''}</td>
                    <td class="py-2 px-4">${cert.renew_by || ''}</td>
                    <td class="py-2 px-4">${cert.training_center_name || ''}</td>
                    <td class="py-2 px-4">${cert.training_center_id || ''}</td>
                    <td class="py-2 px-4">${new Date(cert.created_at).toLocaleDateString()}</td>
                    <td class="py-2 px-4">
                        <a href="/certificates/verify/${cert.id}" class="text-blue-500 hover:underline mr-2">View</a>
                        <button class="text-red-500 hover:underline delete-btn" data-id="${cert.id}">Delete</button>
                        <button class="text-red-500 hover:underline renew-btn" data-id="${cert.id}">Renew</button>
                    </td>
                `;
        certificatesList.appendChild(row);
      });
      offset += limit;
      loading = false;

      // Show load more button if there are more certificates to load
      if (offset < data.total) {
        document.getElementById('loadMoreBtn').classList.remove('hidden');
      } else {
        document.getElementById('loadMoreBtn').classList.add('hidden');
      }
    }

    document.getElementById('searchInput').addEventListener('input', () => {
      offset = 0;
      document.getElementById('certificatesList').innerHTML = '';
      loadCertificates(document.getElementById('searchInput').value);
    });

    window.addEventListener('scroll', () => {
      const { scrollTop, clientHeight, scrollHeight } = document.documentElement;
      if (scrollTop + clientHeight >= scrollHeight - 20 && !loading) {
        loadCertificates(document.getElementById('searchInput').value);
      }
    });

    // Delete certificate event listener
    document.getElementById('certificatesList').addEventListener('click', async (event) => {
      if (event.target.classList.contains('delete-btn')) {
        const certificateId = event.target.getAttribute('data-id');
        if (confirm(`Are you sure you want to delete certificate ${certificateId}?`)) {
          try {
            const response = await fetch(`/certificates/${certificateId}`, {
              method: 'DELETE',
            });
            if (response.ok) {
              // Remove the deleted certificate from the UI
              event.target.closest('tr').remove();
              alert(`Certificate ${certificateId} deleted successfully.`);
            } else {
              throw new Error('Failed to delete certificate.');
            }
          } catch (error) {
            console.error('Error deleting certificate:', error);
            alert('An error occurred while deleting the certificate.');
          }
        }
      }
    });
    document.getElementById('certificatesList').addEventListener('click', async (event) => {
      if (event.target.classList.contains('renew-btn')) {
        const certificateId = event.target.getAttribute('data-id');
        if (confirm(`Are you sure you want to delete certificate ${certificateId}?`)) {
          try {
            const response = await fetch(`/certificates/renew/${certificateId}`, {
              method: 'POST',
            });
            if (response.ok) {
              alert(`Certificate ${certificateId} renewed successfully.`);
            } else {
              throw new Error('Failed to renew certificate.');
            }
          } catch (error) {
            console.error('Error deleting certificate:', error);
            alert('An error occurred while deleting the certificate.');
          }
        }
      }
    });

    // Initially show settings section
    sections["Settings"].classList.remove("hidden");
  });
</script>

</body>
</html>
